#include <SPI.h>
#include <LoRa.h>
#include <Wire.h>
#include <Adafruit_BME680.h>
#include <SoftwareSerial.h>
#include "sha256.h" // Cryptosuite library

// --- LoRa Pins (NodeMCU ESP8266) ---
#define LORA_SS 15
#define LORA_RST 16
#define LORA_DIO0 2

// --- Bluetooth Pins ---
SoftwareSerial BT(4, 5); // RX, TX (connect HC-05 TX → D4, RX → D5)

// --- BME680 Sensor ---
Adafruit_BME680 bme;

// Node Details
String nodeID = "Node_1"; // Change for each node: Node_2, Node_3, etc.

// Blockchain variables
const int MAX_BLOCKS = 100; // Number of readings stored
String blockchain[MAX_BLOCKS];
int blockIndex = 0;

// Timing
unsigned long lastSendTime = 0;
unsigned long sendInterval = 5000; // Send every 5 seconds

// Generate SHA-256 Hash
String getHash(String input) {
  SHA256 sha256;
  sha256.update(input.c_str(), input.length());
  uint8_t *digest = sha256.result();
  String hashString = "";
  for (int i = 0; i < 32; i++) {
    char hex[3];
    sprintf(hex, "%02x", digest[i]);
    hashString += hex;
  }
  return hashString;
}

// Create a new blockchain block
String createBlock(float temp, float hum, float pres, float gas) {
  String prevHash = (blockIndex == 0) ? "0" : blockchain[(blockIndex - 1) % MAX_BLOCKS].substring(blockchain[(blockIndex - 1) % MAX_BLOCKS].lastIndexOf(",") + 1);
  
  String data = String(blockIndex) + "," + String(millis()) + "," + nodeID + "," +
                String(temp) + "," + String(hum) + "," + String(pres) + "," + String(gas) + "," + prevHash;
  
  String hash = getHash(data);
  String block = data + "," + hash;
  
  blockchain[blockIndex % MAX_BLOCKS] = block;
  blockIndex++;
  
  return block;
}

// Send blockchain via Bluetooth
void sendBlockchainToBT() {
  BT.println("---- Blockchain Data ----");
  for (int i = 0; i < blockIndex && i < MAX_BLOCKS; i++) {
    BT.println(blockchain[i]);
  }
}

void setup() {
  Serial.begin(115200);
  BT.begin(9600);

  // LoRa Init
  LoRa.setPins(LORA_SS, LORA_RST, LORA_DIO0);
  if (!LoRa.begin(433E6)) { // Change frequency if needed
    Serial.println("LoRa init failed!");
    while (1);
  }
  Serial.println("LoRa init OK");

  // BME680 Init
  if (!bme.begin()) {
    Serial.println("BME680 not found!");
    while (1);
  }
  bme.setTemperatureOversampling(BME680_OS_8X);
  bme.setHumidityOversampling(BME680_OS_2X);
  bme.setPressureOversampling(BME680_OS_4X);
  bme.setGasHeater(320, 150); // Heater temperature (C) and duration (ms)
}

void loop() {
  // --- Receive LoRa Data ---
  int packetSize = LoRa.parsePacket();
  if (packetSize) {
    String incoming = "";
    while (LoRa.available()) {
      incoming += (char)LoRa.read();
    }
    Serial.println("Received: " + incoming);
    BT.println("Received: " + incoming);
  }

  // --- Send Own Data ---
  if (millis() - lastSendTime > sendInterval) {
    if (!bme.performReading()) {
      Serial.println("Sensor read error!");
      return;
    }

    String block = createBlock(
      bme.temperature,
      bme.humidity,
      bme.pressure / 100.0,
      bme.gas_resistance / 1000.0
    );

    LoRa.beginPacket();
    LoRa.print(block);
    LoRa.endPacket();

    Serial.println("Sent: " + block);
    BT.println("Live Data: " + block);

    lastSendTime = millis();
  }

  // --- Bluetooth Commands ---
  if (BT.available()) {
    String cmd = BT.readString();
    cmd.trim();
    if (cmd.equalsIgnoreCase("LEDGER")) {
      sendBlockchainToBT();
    }
    if (cmd.equalsIgnoreCase("LIVE")) {
      if (blockIndex > 0) {
        BT.println("Latest: " + blockchain[(blockIndex - 1) % MAX_BLOCKS]);
      }
    }
  }
}
